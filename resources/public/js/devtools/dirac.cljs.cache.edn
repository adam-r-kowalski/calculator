;; Analyzed by ClojureScript 1.7.170
{:use-macros {oget devtools.util, ocall devtools.util, oapply devtools.util, gen-config devtools.dirac}, :excludes #{}, :name devtools.dirac, :imports nil, :requires {goog.object goog.object, brepl clojure.browser.repl, clojure.browser.repl clojure.browser.repl, devtools.prefs devtools.prefs, string clojure.string, clojure.string clojure.string, ua goog.labs.userAgent.browser, goog.labs.userAgent.browser goog.labs.userAgent.browser}, :uses {pref devtools.prefs}, :defs {dirac-msg-args {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 54, :column 7, :end-line 54, :end-column 21, :arglists (quote ([name args]))}, :name devtools.dirac/dirac-msg-args, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 21, :method-params ([name args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name args]))}, log {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 63, :column 7, :end-line 63, :end-column 10, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name devtools.dirac/log, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, present-java-trace {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 92, :column 7, :end-line 92, :end-column 25, :arglists (quote ([request-id text]))}, :name devtools.dirac/present-java-trace, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 25, :method-params ([request-id text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id text]))}, present-repl-result {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 119, :column 16, :end-line 119, :end-column 35, :export true, :arglists (quote ([request-id value])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation result."}, :name devtools.dirac/present-repl-result, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 35, :method-params ([request-id value]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id value])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation result."}, present-in-dirac-repl {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 130, :column 16, :end-line 130, :end-column 37, :export true, :arglists (quote ([request-id value]))}, :name devtools.dirac/present-in-dirac-repl, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 37, :method-params ([request-id value]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id value]))}, console-tunnel {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([method & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(method args)], :arglists ([method & args]), :arglists-meta (nil)}}, :name devtools.dirac/console-tunnel, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(method args)], :arglists ([method & args]), :arglists-meta (nil)}, :method-params [(method args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists ([method & args])}, default-config {:name devtools.dirac/default-config, :file "resources/public/js/devtools/dirac.cljs", :line 30, :column 1, :end-line 30, :end-column 20, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 30, :column 6, :end-line 30, :end-column 20}}, group {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 78, :column 7, :end-line 78, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name devtools.dirac/group, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, *installed?* {:name devtools.dirac/*installed?*, :file "resources/public/js/devtools/dirac.cljs", :line 26, :column 1, :end-line 26, :end-column 32, :dynamic true, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 26, :column 20, :end-line 26, :end-column 32, :dynamic true}}, call-dirac {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 60, :column 7, :end-line 60, :end-column 17, :arglists (quote ([name & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name args)], :arglists ([name & args]), :arglists-meta (nil)}}, :name devtools.dirac/call-dirac, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name args)], :arglists ([name & args]), :arglists-meta (nil)}, :method-params [(name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists ([name & args])}, warn {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 66, :column 7, :end-line 66, :end-column 11, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name devtools.dirac/warn, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, install! {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 173, :column 16, :end-line 173, :end-column 24, :export true, :arglists (quote ([]))}, :name devtools.dirac/install!, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, postprocess-successful-eval {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 146, :column 16, :end-line 146, :end-column 43, :export true, :arglists (quote ([value])), :doc "This is a postprocessing function wrapping weasel javascript evaluation attempt.\n  This structure is needed for building response to nREPL server (see dirac.implant.weasel in Dirac project)\n  In our case weasel is running in the context of Dirac DevTools and could potentially have different version of cljs runtime.\n  To be correct we have to do this post-processing in app's context to use the same cljs runtime as app evaluating the code.\n\n  Also we have to be careful to not enter into infinite printing with cyclic data structures.\n  We limit printing level and length."}, :name devtools.dirac/postprocess-successful-eval, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 43, :method-params ([value]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "This is a postprocessing function wrapping weasel javascript evaluation attempt.\n  This structure is needed for building response to nREPL server (see dirac.implant.weasel in Dirac project)\n  In our case weasel is running in the context of Dirac DevTools and could potentially have different version of cljs runtime.\n  To be correct we have to do this post-processing in app's context to use the same cljs runtime as app evaluating the code.\n\n  Also we have to be careful to not enter into infinite printing with cyclic data structures.\n  We limit printing level and length."}, present-output {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 137, :column 16, :end-line 137, :end-column 30, :export true, :arglists (quote ([request-id kind text]))}, :name devtools.dirac/present-output, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 30, :method-params ([request-id kind text]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([request-id kind text]))}, api-version {:name devtools.dirac/api-version, :file "resources/public/js/devtools/dirac.cljs", :line 28, :column 1, :end-line 28, :end-column 21, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 28, :column 10, :end-line 28, :end-column 21}}, present-repl-exception {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 125, :column 16, :end-line 125, :end-column 38, :export true, :arglists (quote ([request-id exception])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation exception."}, :name devtools.dirac/present-repl-exception, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 38, :method-params ([request-id exception]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id exception])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation exception."}, detect-and-strip {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 86, :column 7, :end-line 86, :end-column 23, :arglists (quote ([prefix text]))}, :name devtools.dirac/detect-and-strip, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 23, :method-params ([prefix text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prefix text]))}, available? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 23, :column 17, :end-line 23, :end-column 27, :dynamic true, :arglists (quote ([]))}, :name devtools.dirac/available?, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, installed? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 170, :column 16, :end-line 170, :end-column 26, :export true, :arglists (quote ([]))}, :name devtools.dirac/installed?, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, postprocess-unsuccessful-eval {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 160, :column 16, :end-line 160, :end-column 45, :export true, :arglists (quote ([ex]))}, :name devtools.dirac/postprocess-unsuccessful-eval, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 45, :method-params ([ex]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex]))}, static-config {:name devtools.dirac/static-config, :file "resources/public/js/devtools/dirac.cljs", :line 44, :column 1, :end-line 44, :end-column 23, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 44, :column 10, :end-line 44, :end-column 23}}, build-effective-config {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 103, :column 7, :end-line 103, :end-column 29, :arglists (quote ([default-config static-config]))}, :name devtools.dirac/build-effective-config, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 29, :method-params ([default-config static-config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 2, :fn-var true, :arglists (quote ([default-config static-config]))}, get-api-version {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 116, :column 16, :end-line 116, :end-column 31, :export true, :arglists (quote ([]))}, :name devtools.dirac/get-api-version, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, group-collapsed {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 75, :column 7, :end-line 75, :end-column 22, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name devtools.dirac/group-collapsed, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, group-end {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 81, :column 7, :end-line 81, :end-column 16, :arglists (quote ([]))}, :name devtools.dirac/group-end, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, uninstall! {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 179, :column 16, :end-line 179, :end-column 26, :export true, :arglists (quote ([]))}, :name devtools.dirac/uninstall!, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dirac-log-args {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 57, :column 7, :end-line 57, :end-column 21, :arglists (quote ([request-id kind args]))}, :name devtools.dirac/dirac-log-args, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 21, :method-params ([request-id kind args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 3, :fn-var true, :arglists (quote ([request-id kind args]))}, get-effective-config {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 113, :column 16, :end-line 113, :end-column 36, :export true, :arglists (quote ([]))}, :name devtools.dirac/get-effective-config, :variadic false, :file "resources/public/js/devtools/dirac.cljs", :end-column 36, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, error {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 69, :column 7, :end-line 69, :end-column 12, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name devtools.dirac/error, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, group* {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/dirac.cljs", :line 72, :column 7, :end-line 72, :end-column 13, :arglists (quote ([collapsed? request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(collapsed? request-id kind args)], :arglists ([collapsed? request-id kind & args]), :arglists-meta (nil)}}, :name devtools.dirac/group*, :variadic true, :file "resources/public/js/devtools/dirac.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(collapsed? request-id kind args)], :arglists ([collapsed? request-id kind & args]), :arglists-meta (nil)}, :method-params [(collapsed? request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists ([collapsed? request-id kind & args])}}, :require-macros {devtools.util devtools.util, devtools.dirac devtools.dirac}, :cljs.analyzer/constants {:seen #{:weasel-auto-reconnect :java-trace-header-style :dirac-print-length :eval-time-limit :agent-verbose :agent-response-timeout :dirac-print-level :agent-host :weasel-verbose :stderr :weasel-pre-eval-delay :install-check-next-trial-waiting-time :install-check-eval-time-limit :agent-port :agent-auto-reconnect :install-check-total-time-limit}, :order [:weasel-auto-reconnect :eval-time-limit :agent-verbose :agent-response-timeout :agent-host :weasel-verbose :weasel-pre-eval-delay :install-check-next-trial-waiting-time :install-check-eval-time-limit :agent-port :agent-auto-reconnect :install-check-total-time-limit :stderr :java-trace-header-style :dirac-print-level :dirac-print-length]}, :doc nil}