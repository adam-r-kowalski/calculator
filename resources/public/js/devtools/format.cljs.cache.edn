;; Analyzed by ClojureScript 1.7.170
{:use-macros {oset devtools.util, oget devtools.util, ocall devtools.util, oapply devtools.util}, :excludes #{}, :name devtools.format, :imports nil, :requires {devtools.prefs devtools.prefs}, :uses {pref devtools.prefs}, :defs {get-target-object {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 86, :column 7, :end-line 86, :end-column 24, :arglists (quote ([value]))}, :name devtools.format/get-target-object, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 24, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, ->TemplateWriter {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 176, :column 10, :end-line 176, :end-column 24, :protocols #{devtools.format/Object cljs.core/IWriter}, :skip-protocol-flag #{cljs.core/IWriter}, :factory :positional, :arglists (quote ([group]))}, :protocols #{devtools.format/Object cljs.core/IWriter}, :name devtools.format/->TemplateWriter, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 24, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group])), :skip-protocol-flag #{cljs.core/IWriter}}, prevent-recursion? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 53, :column 13, :end-line 53, :end-column 31, :tag bool, :arglists (quote ([]))}, :name devtools.format/prevent-recursion?, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :ret-tag bool, :end-line 53, :max-fixed-arity 0, :tag bool, :fn-var true, :arglists (quote ([]))}, alt-printer-impl {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 225, :column 7, :end-line 225, :end-column 23, :arglists (quote ([obj writer opts]))}, :name devtools.format/alt-printer-impl, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 23, :method-params ([obj writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj writer opts]))}, body {:name devtools.format/body, :file "resources/public/js/devtools/format.cljs", :line 346, :column 1, :end-line 346, :end-column 10, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 346, :column 6, :end-line 346, :end-column 10}}, number-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 120, :column 7, :end-line 120, :end-column 22, :arglists (quote ([value]))}, :name devtools.format/number-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 22, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, -header {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 9, :column 4, :end-line 9, :end-column 11, :protocol devtools.format/IDevtoolsFormat, :doc nil, :arglists (quote ([value]))}, :protocol devtools.format/IDevtoolsFormat, :name devtools.format/-header, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 11, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc nil}, expandable? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 170, :column 7, :end-line 170, :end-column 18, :arglists (quote ([obj]))}, :name devtools.format/expandable?, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 18, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, IDevtoolsFormat {:meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 8, :column 14, :end-line 8, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-header [[value]], -has-body [[value]], -body [[value]]}}}, :protocol-symbol true, :name devtools.format/IDevtoolsFormat, :file "resources/public/js/devtools/format.cljs", :end-column 29, :column 1, :line 8, :protocol-info {:methods {-header [[value]], -has-body [[value]], -body [[value]]}}, :info nil, :end-line 8, :impls #{}, :doc nil, :jsdoc ("@interface")}, body-api-call {:name devtools.format/body-api-call, :file "resources/public/js/devtools/format.cljs", :line 366, :column 1, :end-line 366, :end-column 19, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 366, :column 6, :end-line 366, :end-column 19}}, build-body {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 293, :column 7, :end-line 293, :end-column 17, :arglists (quote ([value starting-index]))}, :name devtools.format/build-body, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 17, :method-params ([value starting-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value starting-index]))}, get-current-state {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 30, :column 7, :end-line 30, :end-column 24, :arglists (quote ([]))}, :name devtools.format/get-current-state, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, positions {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 89, :column 7, :end-line 89, :end-column 16, :arglists (quote ([pred coll]))}, :name devtools.format/positions, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, want-value? {:name devtools.format/want-value?, :file "resources/public/js/devtools/format.cljs", :line 343, :column 1, :end-line 343, :end-column 17, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 343, :column 6, :end-line 343, :end-column 17}}, get-current-history {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 39, :column 7, :end-line 39, :end-column 26, :arglists (quote ([]))}, :name devtools.format/get-current-history, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, detect-edge-case-and-patch-it {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 208, :column 7, :end-line 208, :end-column 36, :arglists (quote ([group obj]))}, :name devtools.format/detect-edge-case-and-patch-it, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 36, :method-params ([group obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group obj]))}, bool? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 151, :column 7, :end-line 151, :end-column 12, :arglists (quote ([value]))}, :name devtools.format/bool?, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 12, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, string-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 139, :column 7, :end-line 139, :end-column 22, :arglists (quote ([source-string]))}, :name devtools.format/string-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 22, :method-params ([source-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source-string]))}, managed-pr-str {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 244, :column 7, :end-line 244, :end-column 21, :arglists (quote ([value style print-level]))}, :name devtools.format/managed-pr-str, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 21, :method-params ([value style print-level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value style print-level]))}, has-body* {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 323, :column 7, :end-line 323, :end-column 16, :arglists (quote ([value]))}, :name devtools.format/has-body*, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 16, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, wrap-group-in-reference-if-needed {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 187, :column 7, :end-line 187, :end-column 40, :arglists (quote ([group obj]))}, :name devtools.format/wrap-group-in-reference-if-needed, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 40, :method-params ([group obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group obj]))}, body* {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 330, :column 7, :end-line 330, :end-column 12, :arglists (quote ([value]))}, :name devtools.format/body*, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 12, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, meta-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 127, :column 7, :end-line 127, :end-column 20, :arglists (quote ([value]))}, :name devtools.format/meta-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 20, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, build-header-wrapped {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 259, :column 7, :end-line 259, :end-column 27, :arglists (quote ([value]))}, :name devtools.format/build-header-wrapped, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 27, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, surrogate {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 75, :column 7, :end-line 75, :end-column 16, :arglists (quote ([object header] [object header has-body] [object header has-body body-template])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([object header] [object header has-body] [object header has-body body-template]), :arglists ([object header] [object header has-body] [object header has-body body-template]), :arglists-meta (nil nil nil)}}, :name devtools.format/surrogate, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([object header] [object header has-body] [object header has-body body-template]), :arglists ([object header] [object header has-body] [object header has-body body-template]), :arglists-meta (nil nil nil)}, :method-params ([object header] [object header has-body] [object header has-body body-template]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 4, :fn-var true, :arglists ([object header] [object header has-body] [object header has-body body-template])}, body-lines-templates {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 279, :column 7, :end-line 279, :end-column 27, :arglists (quote ([value starting-index]))}, :name devtools.format/body-lines-templates, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 27, :method-params ([value starting-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value starting-index]))}, TemplateWriter {:num-fields 1, :protocols #{devtools.format/Object cljs.core/IWriter}, :name devtools.format/TemplateWriter, :file "resources/public/js/devtools/format.cljs", :end-column 24, :type true, :column 10, :line 176, :record false, :end-line 176, :skip-protocol-flag #{cljs.core/IWriter}}, -has-body {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 10, :column 4, :end-line 10, :end-column 13, :protocol devtools.format/IDevtoolsFormat, :doc nil, :arglists (quote ([value]))}, :protocol devtools.format/IDevtoolsFormat, :name devtools.format/-has-body, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 13, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc nil}, set-prevent-recursion! {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 56, :column 7, :end-line 56, :end-column 29, :arglists (quote ([]))}, :name devtools.format/set-prevent-recursion!, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, push-object-to-current-history! {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 36, :column 7, :end-line 36, :end-column 38, :arglists (quote ([object]))}, :name devtools.format/push-object-to-current-history!, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 38, :method-params ([object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([object]))}, build-surrogate-body {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 300, :column 7, :end-line 300, :end-column 27, :arglists (quote ([value]))}, :name devtools.format/build-surrogate-body, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 27, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, is-circular?! {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 95, :column 13, :end-line 95, :end-column 26, :tag bool, :arglists (quote ([object]))}, :name devtools.format/is-circular?!, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 26, :method-params ([object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :ret-tag bool, :end-line 95, :max-fixed-arity 1, :tag bool, :fn-var true, :arglists (quote ([object]))}, update-current-state! {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 33, :column 7, :end-line 33, :end-column 28, :arglists (quote ([f & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :name devtools.format/update-current-state!, :variadic true, :file "resources/public/js/devtools/format.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists ([f & args])}, body-line-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 268, :column 7, :end-line 268, :end-column 25, :arglists (quote ([index value]))}, :name devtools.format/body-line-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 25, :method-params ([index value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([index value]))}, circular-reference-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 106, :column 7, :end-line 106, :end-column 34, :arglists (quote ([content-group]))}, :name devtools.format/circular-reference-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 34, :method-params ([content-group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content-group]))}, standard-body-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 262, :column 7, :end-line 262, :end-column 29, :arglists (quote ([lines] [lines margin?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([lines] [lines margin?]), :arglists ([lines] [lines margin?]), :arglists-meta (nil nil)}}, :name devtools.format/standard-body-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([lines] [lines margin?]), :arglists ([lines] [lines margin?]), :arglists-meta (nil nil)}, :method-params ([lines] [lines margin?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 2, :fn-var true, :arglists ([lines] [lines margin?])}, template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 59, :column 7, :end-line 59, :end-column 15, :arglists (quote ([tag style & children])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(tag style children)], :arglists ([tag style & children]), :arglists-meta (nil)}}, :name devtools.format/template, :variadic true, :file "resources/public/js/devtools/format.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(tag style children)], :arglists ([tag style & children]), :arglists-meta (nil)}, :method-params [(tag style children)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists ([tag style & children])}, build-header {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 253, :column 7, :end-line 253, :end-column 19, :arglists (quote ([value]))}, :name devtools.format/build-header, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 19, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, make-template-writer {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 184, :column 7, :end-line 184, :end-column 27, :arglists (quote ([]))}, :name devtools.format/make-template-writer, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, wrap-group-in-circular-warning-if-needed {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 192, :column 7, :end-line 192, :end-column 47, :arglists (quote ([group circular?]))}, :name devtools.format/wrap-group-in-circular-warning-if-needed, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 47, :method-params ([group circular?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group circular?]))}, header {:name devtools.format/header, :file "resources/public/js/devtools/format.cljs", :line 344, :column 1, :end-line 344, :end-column 12, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 344, :column 6, :end-line 344, :end-column 12}}, abbreviated? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 163, :column 7, :end-line 163, :end-column 19, :arglists (quote ([template]))}, :name devtools.format/abbreviated?, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 19, :method-params ([template]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([template]))}, want-value?* {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 312, :column 7, :end-line 312, :end-column 19, :arglists (quote ([value]))}, :name devtools.format/want-value?*, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 19, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, header* {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 317, :column 7, :end-line 317, :end-column 14, :arglists (quote ([value]))}, :name devtools.format/header*, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 14, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, *current-state* {:name devtools.format/*current-state*, :file "resources/public/js/devtools/format.cljs", :line 28, :column 1, :end-line 28, :end-column 31, :dynamic true, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 28, :column 16, :end-line 28, :end-column 31, :dynamic true}}, has-body-api-call {:name devtools.format/has-body-api-call, :file "resources/public/js/devtools/format.cljs", :line 365, :column 1, :end-line 365, :end-column 23, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 365, :column 6, :end-line 365, :end-column 23}}, surrogate? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 70, :column 7, :end-line 70, :end-column 17, :arglists (quote ([value]))}, :name devtools.format/surrogate?, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 17, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, -body {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 11, :column 4, :end-line 11, :end-column 9, :protocol devtools.format/IDevtoolsFormat, :doc nil, :arglists (quote ([value]))}, :protocol devtools.format/IDevtoolsFormat, :name devtools.format/-body, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 9, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc nil}, reference {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 112, :column 7, :end-line 112, :end-column 16, :arglists (quote ([object]))}, :name devtools.format/reference, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 16, :method-params ([object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([object]))}, atomic-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 154, :column 7, :end-line 154, :end-column 22, :arglists (quote ([value]))}, :name devtools.format/atomic-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 22, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, build-api-call {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 351, :column 7, :end-line 351, :end-column 21, :arglists (quote ([raw-fn pre-handler-key post-handler-key]))}, :name devtools.format/build-api-call, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 21, :method-params ([raw-fn pre-handler-key post-handler-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 3, :fn-var true, :arglists (quote ([raw-fn pre-handler-key post-handler-key]))}, seq-count-is-greater-or-equal? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 166, :column 7, :end-line 166, :end-column 37, :arglists (quote ([seq limit]))}, :name devtools.format/seq-count-is-greater-or-equal?, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 37, :method-params ([seq limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seq limit]))}, header-api-call {:name devtools.format/header-api-call, :file "resources/public/js/devtools/format.cljs", :line 364, :column 1, :end-line 364, :end-column 21, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 364, :column 6, :end-line 364, :end-column 21}}, has-body {:name devtools.format/has-body, :file "resources/public/js/devtools/format.cljs", :line 345, :column 1, :end-line 345, :end-column 14, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 345, :column 6, :end-line 345, :end-column 14}}, abbreviate-long-string {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 133, :column 7, :end-line 133, :end-column 29, :arglists (quote ([string]))}, :name devtools.format/abbreviate-long-string, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 29, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, cljs-value? {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 49, :column 7, :end-line 49, :end-column 18, :arglists (quote ([value]))}, :name devtools.format/cljs-value?, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 18, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, index-template {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 117, :column 7, :end-line 117, :end-column 21, :arglists (quote ([value]))}, :name devtools.format/index-template, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 21, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, config-wrapper {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 338, :column 7, :end-line 338, :end-column 21, :arglists (quote ([raw-fn]))}, :name devtools.format/config-wrapper, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 21, :method-params ([raw-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 1, :fn-var true, :arglists (quote ([raw-fn]))}, remove-positions {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 92, :column 7, :end-line 92, :end-column 23, :arglists (quote ([coll indices]))}, :name devtools.format/remove-positions, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 23, :method-params ([coll indices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll indices]))}, prepare-body-lines {:protocol-inline nil, :meta {:file "/Users/adam/Development/clojure/demo/calculator/resources/public/js/devtools/format.cljs", :line 271, :column 7, :end-line 271, :end-column 25, :arglists (quote ([data starting-index]))}, :name devtools.format/prepare-body-lines, :variadic false, :file "resources/public/js/devtools/format.cljs", :end-column 25, :method-params ([data starting-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data starting-index]))}}, :require-macros {devtools.util devtools.util}, :cljs.analyzer/constants {:seen #{:max-number-body-items :symbol-style :nil-style :body-pre-handler :line-index-separator :new-line-string-replacer :meta-reference-style :header-style :body-items-more-label :else :has-body-pre-handler :surrogate-key :string-abbreviation-marker :max-header-elements :li :header-post-handler :circular-reference-wrapper-style :header-pre-handler :prevent-recursion group :expanded-string-style :standard-li-style :body-style :history :entered-reference :dq :nil-label :fallback-impl :standard-ol-no-margin-style :standard-ol-style :float-style :body-post-handler :more-marker :bool-style :seqables-always-expandable :string-style :circular-reference-label :min-sequable-count-for-expansion :integer-style :ol :print-length :standard-li-no-margin-style :string-postfix-limit :item-style :index-style :has-body-post-handler :circular-reference-style :body-items-more-label-style :max-print-level :meta-wrapper-style :alt-impl :meta-body-style :string-prefix-limit :cljs-style :print-meta-data :body-line-max-print-level :keyword-style :span :meta-style}, :order [:history :prevent-recursion :surrogate-key :entered-reference :span :circular-reference-wrapper-style :circular-reference-style :circular-reference-label :index-style :line-index-separator :integer-style :float-style :meta-style :meta-body-style :meta-reference-style :string-prefix-limit :string-abbreviation-marker :string-postfix-limit :dq :new-line-string-replacer :string-style :expanded-string-style :nil-style :nil-label :bool-style :keyword-style :symbol-style :more-marker :seqables-always-expandable :min-sequable-count-for-expansion group :header-style :else :fallback-impl :print-length :alt-impl :max-header-elements :max-print-level :print-meta-data :meta-wrapper-style :cljs-style :standard-ol-style :standard-ol-no-margin-style :standard-li-style :standard-li-no-margin-style :ol :li :item-style :body-line-max-print-level :max-number-body-items :body-items-more-label-style :body-items-more-label :body-style :header-pre-handler :header-post-handler :has-body-pre-handler :has-body-post-handler :body-pre-handler :body-post-handler]}, :doc nil}